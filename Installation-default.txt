Docker-shellrunservers
>> docker network create appnet
>>
>> docker network connect appnet mysql1
>> docker network connect appnet postgres1
>> docker network connect appnet mongo1
>> docker network connect appnet redis1
>> docker network connect appnet solr1

Docker-mysql
>> [https://hub.docker.com/_/mysql]
>> docker pull mysql:latest
>> docker run --rm --name=mysql1 --env "MYSQL_ROOT_PASSWORD=password" -p 3306:3306 -d mysql
>> docker run --rm --name=mysql1 --network=appnet --env "MYSQL_ROOT_PASSWORD=password" --mount type=bind,src=/opt/docker/mysql/data,dst=/var/lib/mysql -p 3306:3306 -d mysql
>> docker logs -f mysql1
>> docker exec -it mysql1 bash
>> docker exec -it mysql1 mysql -uroot -ppassword
>> ALTER USER 'root'@'localhost' IDENTIFIED BY 'password';
>> RENAME USER 'root'@'localhost' TO 'root'@'%';
>> ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'password';
>> docker stop mysql1
>>
>> USE mysql; UPDATE user SET authentication_string=password('password') where user='root';
>> CREATE USER 'test'@'%' IDENTIFIED BY 'password';
>> GRANT ALL PRIVILEGES ON *.* TO 'test'@'%' WITH GRANT OPTION;
>> docker exec -it myapp1 mysql --host=mysql1 --user=test --password

Docker-postgresql
>> [https://hub.docker.com/_/postgres]
>> docker pull postgres:latest
>> docker run --rm --name=postgres1 --env "POSTGRES_PASSWORD=password" -p 5432:5432 -d postgres
>> docker run --rm --name=postgres1 --network=appnet --env "POSTGRES_PASSWORD=password" --mount type=bind,src=/opt/docker/postgres/data,dst=/var/lib/postgresql/data -p 5432:5432 -d postgres
>> docker logs -f postgres1
>> docker exec -it postgres1 bash
>> docker exec -it postgres1 psql -Upostgres -W -p5432
>> docker stop postgres1
>>
>> #sudo -u postgres psql -h localhost postgres
>> ALTER USER postgres PASSWORD 'password';
>> CREATE USER test WITH ENCRYPTED PASSWORD 'password';
>> GRANT ALL PRIVILEGES ON DATABASE postgres TO test WITH GRANT OPTION;

Docker-mongodb
>> [https://hub.docker.com/_/mongo]
>> docker pull mongo:latest
>> docker run --rm --name=mongo1 -p 27017:27017 -d mongo
>> docker run --rm --name=mongo1 --network=appnet --env "MONGO_INITDB_ROOT_USERNAME=root" --env "MONGO_INITDB_ROOT_PASSWORD=password" --mount type=bind,src=/opt/docker/mongo/data,dst=/data/db -p 27017:27017 -d mongo
>> docker logs -f mongo1
>> docker exec -it mongo1 bash
>> docker stop mongo1

Docker-redis
>> [https://hub.docker.com/_/redis]
>> docker pull redis:latest
>> docker run -it --rm -p 6379:6379 redis
>> docker run --rm --name=redis1 -p 6379:6379 -d redis
>> docker run --rm --name=redis1 --network=appnet --mount type=bind,src=/opt/docker/redis/data,dst=/data -p 6379:6379 -d redis
>> docker logs -f redis1
>> docker exec -it redis1 bash
>> docker stop redis1

Docker-solr
>> [https://hub.docker.com/_/solr]
>> docker pull solr:latest
>> docker run -it --rm -p 8983:8983 solr
>> docker run --rm --name=solr1 -p 8983:8983 -d solr solr-precreate mycore
>> docker run --rm --name=solr1 -p 8983:8983 -d solr
>> docker run --rm --name=solr1 --network=appnet --mount type=bind,src=/opt/docker/solr/data,dst=/var/solr/data -p 8983:8983 -d solr solr-precreate mycore
>> docker run --rm --name=solr1 --network=appnet --mount type=bind,src=/opt/docker/solr/data,dst=/var/solr/data -p 8983:8983 -d solr
>> docker logs -f solr1
>> docker exec -it solr1 bash
>> docker exec -it solr1 solr create_core -c mycore
>> docker stop solr1
>>
<<Run Solr to index example data>>
To use Solr, you need to create a "core", an index for your data. In the web UI if you click on "Core Admin" you should now see the "gettingstarted" core.
>> docker exec -it solr1 solr create_core -c gettingstarted
If you want to load some of the example data that is included in the container. In the UI, find the "Core selector" popup menu and select the "gettingstarted" core, then select the "Query" menu item.
>> docker exec -it solr1 post -c gettingstarted example/exampledocs/manufacturers.xml
>>
<<Single-command demo>>
For convenience, there is a single command that starts Solr, creates a collection called "demo", and loads sample data into it.
>> docker run --rm --name=solr1 -d -P solr solr-demo
>>
>> docker exec -it solr1 solr create_core -c newcore
>> curl http://localhost:8983/solr/newcore/update/csv?stream.file=../sampledata/demo_motac_1.csv&commit=true&separator=%3B&overwrite=true&stream.contentType=application/csv;charset=utf-8
>> curl 'http://localhost:8983/solr/newcore/update/csv?commit=true&separator=%3B&overwrite=true' --data-binary @../sampledata/demo_motac_1.csv -H 'Content-type:application/csv'

Docker-tomcat
>> [https://hub.docker.com/_/tomcat]
>> docker pull tomcat:latest
>> docker run -it --rm -p 8080:8080 tomcat:latest
>> docker run --rm --name=tomcat1 -p 8080:8080 -d tomcat
>> docker run --rm --name=tomcat2 -p 8081:8080 -d tomcat
>> docker run --rm --name=tomcat3 -p 8082:8080 -d tomcat
>> docker run --rm --name=tomcat1 --network=appnet --mount type=bind,src=/opt/docker/tomcat/conf,dst=/usr/local/tomcat/conf --mount type=bind,src=/opt/docker/tomcat/webapps,dst=/usr/local/tomcat/webapps -p 8080:8080 -d tomcat
>> docker logs -f tomcat1
>> docker exec -it tomcat1 bash
>> docker stop tomcat1

Docker-nginx
>> [https://hub.docker.com/_/nginx]
>> docker pull nginx:latest
>> docker run -it --rm -p 80:80 nginx:latest
>> docker run --rm --name=nginx1 -p 80:80 -d nginx
>> docker run --rm --name=nginx2 -p 81:80 -d nginx
>> docker run --rm --name=nginx3 -p 82:80 -d nginx
>> docker run --rm --name=nginx1 --network=appnet --mount type=bind,src=/opt/docker/nginx/conf/nginx.conf,dst=/etc/nginx/nginx.conf --mount type=bind,src=/opt/docker/nginx/conf/conf.d,dst=/etc/nginx/conf.d --mount type=bind,src=/opt/docker/nginx/html,dst=/usr/share/nginx/html -p 80:80 -d nginx
>> docker logs -f nginx1
>> docker exec -it nginx1 bash
>> docker stop nginx1

Docker-grafana
>> docker pull grafana/grafana:latest
>> docker run -it --rm -p 3000:3000 grafana/grafana
>> docker run --rm --name=grafana1 -p 3000:3000 -d grafana/grafana
>> docker run --rm --name=grafana1 --link postgres1 --link mysql1 --mount type=bind,src=/opt/docker/grafana/conf/grafana.ini,dst=/etc/grafana/grafana.ini --mount type=bind,src=/opt/docker/grafana/data,dst=/var/lib/grafana -p 3000:3000 -d grafana/grafana
>> docker run --rm --name=grafana1 --network=appnet --mount type=bind,src=/opt/docker/grafana/conf/grafana.ini,dst=/etc/grafana/grafana.ini --mount type=bind,src=/opt/docker/grafana/data,dst=/var/lib/grafana -p 3000:3000 -d grafana/grafana
>> docker logs -f grafana1
>> docker exec -it grafana1 bash
>> docker stop grafana1

Docker-prometheus
>> docker pull prom/prometheus:latest
>> docker run -it --rm --name=prometheus1 -p 9090:9090 prom/prometheus
>> docker run --rm --name=prometheus1 --network=appnet --mount type=bind,src=/opt/docker/prometheus/etc/prometheus.yml,dst=/etc/prometheus/prometheus.yml --mount type=bind,src=/opt/docker/prometheus/etc/alert_rules.yml,dst=/etc/prometheus/alert_rules.yml -p 9090:9090 -d prom/prometheus

Docker-alertmanager
>> docker pull prom/alertmanager:latest
>> docker run -it --rm --name=alertmanager1 -p 9093:9093 prom/alertmanager
>> docker run --rm --name=alertmanager1 --network=appnet --mount type=bind,src=/opt/docker/alertmanager/etc/alertmanager.yml,dst=/etc/alertmanager/alertmanager.yml -p 9093:9093 -d prom/alertmanager --config.file=/etc/alertmanager/alertmanager.yml

Docker-container-exporter
>> docker pull prom/container-exporter:latest
>> docker run -it --rm --name=container-exporter1 -p 9104:9104 prom/container-exporter
>> docker run --rm --name=container-exporter1 --network=appnet --mount type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock -p 9104:9104 -d prom/container-exporter

Docker-node-exporter
>> docker pull prom/node-exporter:latest
>> docker run -it --rm --name=node-exporter1 -p 9100:9100 prom/node-exporter
>> docker run --rm --name=node-exporter1 --network=appnet -p 9100:9100 -d prom/node-exporter

Docker-cadvisor
>> docker pull google/cadvisor:latest
>> docker run -it --rm --name=cadvisor1 -p 8090:8080 google/cadvisor
>> docker run --rm --name=cadvisor1 --network=appnet --mount type=bind,src=/,dst=/rootfs --mount type=bind,src=/var/run,dst=/var/run --mount type=bind,src=/sys,dst=/sys --mount type=bind,src=/var/lib/docker/,dst=/var/lib/docker -p 8090:8080 -d google/cadvisor
