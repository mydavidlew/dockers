# This config file contains all config fields with comments
# NOTE: this is not a particularly useful config file
#
# (run) kubectl apply -f kubernetes/apache-config.yaml
# (run) kubectl rollout status deployment/mywebserver
# (run) kubectl edit deployment.v1.apps/mywebserver
# (run) kubectl rollout history deployment.v1.apps/mywebserver
# (run) kubectl expose deployment mywebserver --type=ClusterIP --name=mywebserver --port=80  --target-port=80
# (run) kubectl port-forward svc/mywebserver 8081:80
#
# 'Deployment' to manage of configuration of mywebserver Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mywebserver
  namespace: myspace
  labels:
    k8s-app: apache2
    tier: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      k8s-app: apache2
      tier: frontend
  template:
    metadata:
      labels:
        k8s-app: apache2
        tier: frontend
    spec:
      containers:
      - name: apache2
        image: httpd
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
          protocol: TCP
        volumeMounts:
        - mountPath: /media
          name: apache2-volume1
      volumes:
      - emptyDir: {}
        name: apache2-volume1
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
# This config file contains all config fields with comments
# NOTE: this is not a particularly useful config file
#
# (run) kubectl apply -f kubernetes/apache-service.yaml
#
# Define 'Service' to expose FrontEnd Application
apiVersion: v1
kind: Service
metadata:
  name: mywebserver
  namespace: myspace
  labels:
    k8s-app: apache2
    tier: frontend
spec:
  selector: # pod labels should match these
    k8s-app: apache2
    tier: frontend
  ports:
  - name: http
    protocol: "TCP"
    port: 80
    targetPort: 80
  #externalIPs:
  #  - 192.168.1.11
  type: LoadBalancer # or ClusterIP, use NodePort if you are not running Kubernetes on Cloud