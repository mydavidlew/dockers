Docker-shellrunservers
>> docker network create appnet

Docker-ElasticSearch
>> [https://www.elastic.co/guide/en/elasticsearch/reference/7.2/docker.html]
>> docker pull docker.elastic.co/elasticsearch/elasticsearch:7.2.0
>> docker run -it --rm --name=elastic1 --network=appnet --env "discovery.type=single-node" -p 9200:9200 -p 9300:9300 docker.elastic.co/elasticsearch/elasticsearch:7.2.0
>> docker run --rm --name=elastic1 --network=appnet --env "discovery.type=single-node" --env "cluster.name=elastic-cluster" --mount type=bind,src=/opt/docker/elasticsearch/conf,dst=/usr/share/elasticsearch/config --mount type=bind,src=/opt/docker/elasticsearch/data,dst=/usr/share/elasticsearch/data -p 9200:9200 -p 9300:9300 -d docker.elastic.co/elasticsearch/elasticsearch:7.2.0
>> docker logs -f elastic1
>> docker exec -it elastic1 bash
>> docker stop elastic1
>>
>> [Elasticsearch list of nodes is located at:]
>> http://10.0.1.53:9200/_cat?pretty
>> http://10.0.1.53:9200/_nodes?pretty

Docker-Kibana
>> [https://www.elastic.co/guide/en/kibana/7.2/docker.html]
>> docker pull docker.elastic.co/kibana/kibana:7.2.0
>> docker run -it --rm --name=kibana1 --network=appnet --link elastic1:elasticsearch -p 5601:5601 docker.elastic.co/kibana/kibana:7.2.0
>> docker run --rm --name=kibana1 --network=appnet --link elastic1:elasticsearch --mount type=bind,src=/opt/docker/kibana/conf,dst=/usr/share/kibana/config -p 5601:5601 -d docker.elastic.co/kibana/kibana:7.2.0
>> docker logs -f kibana1
>> docker exec -it kibana1 bash
>> docker stop kibana1
>>
>> [Kibana serverâ€™s status page is located at:]
>> http://10.0.1.53:5601/status
>> [JSON-formatted server status details API endpoint at:]
>> http://10.0.1.53:5601/api/status

Docker-Logstash
>> [https://www.elastic.co/guide/en/logstash/7.2/docker.html]
>> docker pull docker.elastic.co/logstash/logstash:7.2.0
>> docker run -it --rm --name=logstash1 --network=appnet --link elastic1:elasticsearch -p 5044:5044 -p 9600:9600 docker.elastic.co/logstash/logstash:7.2.0
>> docker run --rm --name=logstash1 --network=appnet --link elastic1:elasticsearch --mount type=bind,src=/opt/docker/logstash/conf,dst=/usr/share/logstash/config --mount type=bind,src=/opt/docker/logstash/pipeline,dst=/usr/share/logstash/pipeline -p 5044:5044 -p 9600:9600 -d docker.elastic.co/logstash/logstash:7.2.0
>> docker logs -f logstash1
>> docker exec -it logstash1 bash
>> docker stop logstash1
>>
>> [To retrieve a list of logging subsystems available at runtime:]
>> http://10.0.1.53:9600/_node/logging?pretty

Docker-Beats
>> [https://www.elastic.co/guide/en/beats/auditbeat/7.2/running-on-docker.html] -> curl -L -O https://raw.githubusercontent.com/elastic/beats/7.2/deploy/docker/auditbeat.docker.yml
>> [https://www.elastic.co/guide/en/beats/filebeat/7.2/running-on-docker.html -> curl -L -O https://raw.githubusercontent.com/elastic/beats/7.2/deploy/docker/filebeat.docker.yml
>> [https://www.elastic.co/guide/en/beats/heartbeat/7.2/running-on-docker.html] -> curl -L -O https://raw.githubusercontent.com/elastic/beats/7.2/deploy/docker/heartbeat.docker.yml
>> [https://www.elastic.co/guide/en/beats/journalbeat/7.2/running-on-docker.html] -> curl -L -O https://raw.githubusercontent.com/elastic/beats/7.2/deploy/docker/journalbeat.docker.yml
>> [https://www.elastic.co/guide/en/beats/metricbeat/7.2/running-on-docker.html] -> curl -L -O https://raw.githubusercontent.com/elastic/beats/7.2/deploy/docker/metricbeat.docker.yml
>> [https://www.elastic.co/guide/en/beats/packetbeat/7.2/running-on-docker.html] -> curl -L -O https://raw.githubusercontent.com/elastic/beats/7.2/deploy/docker/packetbeat.docker.yml
>>
>> [Auditbeat]   docker pull docker.elastic.co/beats/auditbeat:7.2.0
>> [Filebeat]    docker pull docker.elastic.co/beats/filebeat:7.2.0
>> [Heartbeat]   docker pull docker.elastic.co/beats/heartbeat:7.2.0
>> [Journalbeat] docker pull docker.elastic.co/beats/journalbeat:7.2.0 
>> [Metricbeat]  docker pull docker.elastic.co/beats/metricbeat:7.2.0
>> [Packetbeat]  docker pull docker.elastic.co/beats/packetbeat:7.2.0
>>
>> [Filebeat and index pattern setup]
>> docker run -it --name=auditbeat1 --network=appnet --link elastic1:elasticsearch --link kibana1:kibana --link logstash1:logstash --cap-add="AUDIT_CONTROL" --cap-add="AUDIT_READ" docker.elastic.co/beats/auditbeat:7.2.0 setup --dashboards --pipelines --index-management --machine-learning -E setup.kibana.host=kibana:5601 -E output.elasticsearch.hosts=["elasticsearch:9200"]
>> docker run -it --name=filebeat1 --network=appnet --link elastic1:elasticsearch --link kibana1:kibana --link logstash1:logstash docker.elastic.co/beats/filebeat:7.2.0 setup --dashboards --pipelines --index-management --machine-learning -E setup.kibana.host=kibana:5601 -E output.elasticsearch.hosts=["elasticsearch:9200"]
>> docker run -it --name=heartbeat1 --network=appnet --link elastic1:elasticsearch --link kibana1:kibana --link logstash1:logstash docker.elastic.co/beats/heartbeat:7.2.0 setup --dashboards --pipelines --index-management --machine-learning -E setup.kibana.host=kibana:5601 -E output.elasticsearch.hosts=["elasticsearch:9200"]
>> docker run -it --name=journalbeat1 --network=appnet --link elastic1:elasticsearch --link kibana1:kibana --link logstash1:logstash docker.elastic.co/beats/journalbeat:7.2.0 setup --dashboards --pipelines --index-management --machine-learning -E setup.kibana.host=kibana:5601 -E output.elasticsearch.hosts=["elasticsearch:9200"]
>> docker run -it --name=metricbeat1 --network=appnet --link elastic1:elasticsearch --link kibana1:kibana --link logstash1:logstash docker.elastic.co/beats/metricbeat:7.2.0 setup --dashboards --pipelines --index-management --machine-learning -E setup.kibana.host=kibana:5601 -E output.elasticsearch.hosts=["elasticsearch:9200"]
>> docker run -it --name=packetbeat1 --network=appnet --link elastic1:elasticsearch --link kibana1:kibana --link logstash1:logstash --cap-add=NET_ADMIN docker.elastic.co/beats/packetbeat:7.2.0 setup --dashboards --pipelines --index-management --machine-learning -E setup.kibana.host=kibana:5601 -E output.elasticsearch.hosts=["elasticsearch:9200"]
>>
>> docker run --rm --hostname=auditbeat1.local --name=auditbeat1 --network=appnet --link elastic1:elasticsearch --link kibana1:kibana --link logstash1:logstash --cap-add="AUDIT_CONTROL" -d docker.elastic.co/beats/auditbeat:7.2.0 -E setup.kibana.host=kibana:5601 -E output.elasticsearch.hosts=["elasticsearch:9200"]
>> docker run --rm --hostname=filebeat1.local --name=filebeat1 --network=appnet --link elastic1:elasticsearch --link kibana1:kibana --link logstash1:logstash -d docker.elastic.co/beats/filebeat:7.2.0 -E setup.kibana.host=kibana:5601 -E output.elasticsearch.hosts=["elasticsearch:9200"]
>> docker run --rm --hostname=heartbeat1.local --name=heartbeat1 --network=appnet --link elastic1:elasticsearch --link kibana1:kibana --link logstash1:logstash -d docker.elastic.co/beats/heartbeat:7.2.0 -E setup.kibana.host=kibana:5601 -E output.elasticsearch.hosts=["elasticsearch:9200"]
>> docker run --rm --hostname=journalbeat1.local --name=journalbeat1 --network=appnet --link elastic1:elasticsearch --link kibana1:kibana --link logstash1:logstash -d docker.elastic.co/beats/journalbeat:7.2.0 -E setup.kibana.host=kibana:5601 -E output.elasticsearch.hosts=["elasticsearch:9200"]
>> docker run --rm --hostname=metricbeat1.local --name=metricbeat1 --network=appnet --link elastic1:elasticsearch --link kibana1:kibana --link logstash1:logstash -d docker.elastic.co/beats/metricbeat:7.2.0 -E setup.kibana.host=kibana:5601 -E output.elasticsearch.hosts=["elasticsearch:9200"]
>> docker run --rm --hostname=packetbeat1.local --name=packetbeat1 --network=appnet --link elastic1:elasticsearch --link kibana1:kibana --link logstash1:logstash --cap-add=NET_ADMIN -d docker.elastic.co/beats/packetbeat:7.2.0 -E setup.kibana.host=kibana:5601 -E output.elasticsearch.hosts=["elasticsearch:9200"]
>>
>> docker run --rm --hostname=auditbeat1.local --name=auditbeat1 --network=appnet --link elastic1:elasticsearch --link kibana1:kibana --link logstash1:logstash --cap-add="AUDIT_CONTROL" --mount type=bind,src=/opt/docker/allbeats/conf/auditbeat.yml,dst=/usr/share/auditbeat/auditbeat.yml -d docker.elastic.co/beats/auditbeat:7.2.0
>> docker run --rm --hostname=filebeat1.local --name=filebeat1 --network=appnet --link elastic1:elasticsearch --link kibana1:kibana --link logstash1:logstash --mount type=bind,src=/opt/docker/allbeats/conf/filebeat.yml,dst=/usr/share/filebeat/filebeat.yml --mount type=bind,src=/opt/docker/filebeat/vmlog,dst=/usr/share/filebeat/logs -d docker.elastic.co/beats/filebeat:7.2.0
>> docker run --rm --hostname=heartbeat1.local --name=heartbeat1 --network=appnet --link elastic1:elasticsearch --link kibana1:kibana --link logstash1:logstash --mount type=bind,src=/opt/docker/allbeats/conf/heartbeat.yml,dst=/usr/share/heartbeat/heartbeat.yml -d docker.elastic.co/beats/heartbeat:7.2.0
>> docker run --rm --hostname=journalbeat1.local --name=journalbeat1 --network=appnet --link elastic1:elasticsearch --link kibana1:kibana --link logstash1:logstash --mount type=bind,src=/opt/docker/allbeats/conf/journalbeat.yml,dst=/usr/share/journalbeat/journalbeat.yml -d docker.elastic.co/beats/journalbeat:7.2.0
>> docker run --rm --hostname=metricbeat1.local --name=metricbeat1 --network=appnet --link elastic1:elasticsearch --link kibana1:kibana --link logstash1:logstash --mount type=bind,src=/opt/docker/allbeats/conf/metricbeat.yml,dst=/usr/share/metricbeat/metricbeat.yml -d docker.elastic.co/beats/metricbeat:7.2.0
>> docker run --rm --hostname=packetbeat1.local --name=packetbeat1 --network=appnet --link elastic1:elasticsearch --link kibana1:kibana --link logstash1:logstash --cap-add=NET_ADMIN --mount type=bind,src=/opt/docker/allbeats/conf/packetbeat.yml,dst=/usr/share/packetbeat/packetbeat.yml -d docker.elastic.co/beats/packetbeat:7.2.0
>> docker logs -f anybeat1
>> docker exec -it anybeat1 bash
>> docker stop anybeat1

Docker-Drools KIE Execution Server
>> ["JAVA_OPTS=$JAVA_OPTS
>>   -Dorg.kie.server.id=kie-server1
>>   -Dorg.kie.server.user=kieserver -Dorg.kie.server.pwd=kieserver
>>   -Dorg.kie.server.controller.user=kieserver -Dorg.kie.server.controller.pwd=kieserver
>>   -Dorg.kie.server.location=http://kie-server1:8081/kie-server/services/rest/server
>>   -Dorg.kie.server.controller=ws://kie-workbench1:8080/business-central/websocket/controller
>> "]
>> docker pull jboss/kie-server:7.29.0.Final
>> docker run -it --rm --name=kie-server1 --network=appnet --env "KIE_SERVER_PROFILE=standalone-full" --link kie-workbench1:business-central-workbench -p 8081:8080 jboss/kie-server:7.29.0.Final
>> docker run --rm --name=kie-server1 --network=appnet --env "KIE_SERVER_PROFILE=standalone-full" --link kie-workbench1:business-central-workbench -p 8081:8080 -d jboss/kie-server:7.29.0.Final
>> docker run --rm --name=kie-server1 --network=appnet --env "KIE_SERVER_PROFILE=standalone-full" --link kie-workbench1:business-central-workbench --mount type=bind,src=/opt/docker/kie-server/conf/mgmt-users.properties,dst=/opt/jboss/wildfly/standalone/configuration/mgmt-users.properties --mount type=bind,src=/opt/docker/kie-server/conf/mgmt-groups.properties,dst=/opt/jboss/wildfly/standalone/configuration/mgmt-groups.properties --mount type=bind,src=/opt/docker/kie-server/conf/application-users.properties,dst=/opt/jboss/wildfly/standalone/configuration/application-users.properties --mount type=bind,src=/opt/docker/kie-server/conf/application-roles.properties,dst=/opt/jboss/wildfly/standalone/configuration/application-roles.properties --mount type=bind,src=/opt/docker/kie-server/bin/start_kie-wb.sh,dst=/opt/jboss/wildfly/bin/start_kie-wb.sh -p 8081:8080 -d jboss/kie-server:7.29.0.Final
>> docker exec kie-server1 sh add-user.sh -a -u kieserver -p kieserver -ro admin,kiemgmt,kie-server,rest-all
>> docker logs -f kie-server1
>> docker exec -it kie-server1 bash
>> docker stop kie-server1
>>
>> [Once container and web applications started, the application is available at:]
>> http://10.0.1.54:8081/kie-server
>> [The Kie Server REST API service is located at:]
>> ws://10.0.1.54:8081/kie-server/websocket/controller
>> http://10.0.1.54:8081/kie-server/services/rest/server/
>> http://10.0.1.54:8081/kie-server/services/rest/server/containers
>> [To add Management Users to the container]
>> ./add-user.sh -u admin -p mimosbhd -ro admin,kiemgmt,kie-server,rest-all,analyst,developer,manager,user
>> [To add Application Users to the container]
>> ./add-user.sh -a -u kieserver -p kieserver -ro admin,kiemgmt,kie-server,rest-all,analyst,developer,manager,user

Docker-Drools Business-Central Workbench
>> ["JAVA_OPTS=$JAVA_OPTS
>>   -Dorg.kie.server.user=kieserver -Dorg.kie.server.pwd=kieserver
>>   -Dorg.kie.workbench.controller.user=kieserver -Dorg.kie.workbench.controller.pwd=kieserver
>>   ###-Dorg.kie.workbench.controller=ws://kie-server1:8080/kie-server/websocket/controller
>>   ###-Dorg.kie.server.controller=ws://kie-workbench1:8080/business-central/websocket/controller
>> "]
>> docker pull jboss/business-central-workbench:7.29.0.Final
>> docker run -it --rm --name=kie-workbench1 --network=appnet --env "KIE_SERVER_PROFILE=standalone-full" --link kie-server1:kie-server -p 8080:8080 -p 8001:8001 jboss/business-central-workbench:7.29.0.Final
>> docker run --rm --name=kie-workbench1 --network=appnet --env "KIE_SERVER_PROFILE=standalone-full" --link kie-server1:kie-server -p 8080:8080 -p 8001:8001 -d jboss/business-central-workbench:7.29.0.Final
>> docker run --rm --name=kie-workbench1 --network=appnet --env "KIE_SERVER_PROFILE=standalone-full" --link kie-server1:kie-server --mount type=bind,src=/opt/docker/kie-workbench/conf/mgmt-users.properties,dst=/opt/jboss/wildfly/standalone/configuration/mgmt-users.properties --mount type=bind,src=/opt/docker/kie-workbench/conf/mgmt-groups.properties,dst=/opt/jboss/wildfly/standalone/configuration/mgmt-groups.properties --mount type=bind,src=/opt/docker/kie-workbench/conf/application-users.properties,dst=/opt/jboss/wildfly/standalone/configuration/application-users.properties --mount type=bind,src=/opt/docker/kie-workbench/conf/application-roles.properties,dst=/opt/jboss/wildfly/standalone/configuration/application-roles.properties --mount type=bind,src=/opt/docker/kie-workbench/bin/start_business-central-wb.sh,dst=/opt/jboss/wildfly/bin/start_business-central-wb.sh -p 8080:8080 -p 8001:8001 -d jboss/business-central-workbench:7.29.0.Final
>> docker exec kie-workbench1 sh add-user.sh -a -u kieserver -p kieserver -ro admin,kiemgmt,kie-server,rest-all
>> docker logs -f kie-workbench1
>> docker exec -it kie-workbench1 bash
>> docker stop kie-workbench1
>>
>> [Once container and web applications started, you can navigate into the business-central Workbench at:]
>> http://10.0.1.54:8080/business-central
>> [The jBPM controller REST endpoints is located at:]
>> ws://10.0.1.54:8080/business-central/websocket/controller
>> http://10.0.1.54:8080/business-central/rest/controller
>> http://10.0.1.54:8080/business-central/rest/controller/management/servers
>> [To add Management Users to the container]
>> ./add-user.sh -u admin -p mimosbhd -ro admin,kiemgmt,kie-server,rest-all,analyst,developer,manager,user
>> [To add Application Users to the container]
>> ./add-user.sh -a -u kieserver -p kieserver -ro admin,kiemgmt,kie-server,rest-all,analyst,developer,manager,user

Docker-Hadoop
>> Big Data Europe Integrator Platform (BDI) --> https://github.com/big-data-europe/docker-hadoop
>> docker-compose -f hadoop/docker-compose.yml up -d
>> docker-compose -f hadoop/docker-compose.yml rm -fsv
>> docker-compose -f hadoop/docker-compose.yml restart <service>
>> docker-compose -f hadoop/docker-compose.yml logs -f
>> docker-compose -f hadoop/docker-compose.yml exec <service> bash
>> docker-compose -f hadoop/docker-compose.yml stop
>>
>> Hadoop <services> List
>> namenode --> bde2020/hadoop-namenode:2.0.0-hadoop3.1.3-java8
>> datanode1 --> bde2020/hadoop-datanode:2.0.0-hadoop3.1.3-java8
>> datanode2 --> bde2020/hadoop-datanode:2.0.0-hadoop3.1.3-java8
>> datanode3 --> bde2020/hadoop-datanode:2.0.0-hadoop3.1.3-java8
>> nodemanager1 --> bde2020/hadoop-nodemanager:2.0.0-hadoop3.1.3-java8
>> nodemanager2 --> bde2020/hadoop-nodemanager:2.0.0-hadoop3.1.3-java8
>> nodemanager3 --> bde2020/hadoop-nodemanager:2.0.0-hadoop3.1.3-java8
>> historyserver --> bde2020/hadoop-historyserver:2.0.0-hadoop3.1.3-java8
>> resourcemanager --> bde2020/hadoop-resourcemanager:2.0.0-hadoop3.1.3-java8
>> zookeeper1 --> zookeeper:3.5.6
>> zookeeper2 --> zookeeper:3.5.6
>> zookeeper3 --> zookeeper:3.5.6
>>
>> URL Paths for Hadoop Services
>> Namenode: http://10.0.1.54:9870/dfshealth.html#tab-overview
>> Datanode: http://10.0.1.54:9864/
>> Nodemanager: http://10.0.1.54:8042/node
>> History server: http://10.0.1.54:8188/applicationhistory
>> Resource manager: http://10.0.1.54:8088/
>> Zookeeper: http://10.0.1.54:8080/commands

Docker-joget-workflow - https://www.joget.org/community/
>> [https://hub.docker.com/r/jogetworkflow/joget-community]
>> docker pull jogetworkflow/joget-community:latest
>> docker run -it --rm --name joget -p 8080:8080 -v /var/lib/mysql jogetworkflow/joget-community
>> docker run --rm --name joget --network=appnet -p 8080:8080 -v /var/lib/mysql -d jogetworkflow/joget-community
>> docker run --rm --name joget --network=appnet --env MYSQL_HOST=10.0.1.51 --env MYSQL_DATABASE=jwdb --env MYSQL_PORT=3306 --env MYSQL_USER=root --env MYSQL_PASSWORD=password --mount type=bind,src=/opt/docker/joget/wflow,dst=/opt/joget/wflow  -p 8080:8080 -d jogetworkflow/joget-community
>>@ #create a volume container for shared data
>>@ docker volume create jogetdata
>>@ #run a MySQL database container
>>@ docker run --name mysql --network=appnet -e MYSQL_ROOT_PASSWORD=jwdb -e MYSQL_USER=joget -e MYSQL_PASSWORD=joget -e MYSQL_DATABASE=jwdb -p 3306:3306 -d mysql:5.7
>>@ #run a Joget container
>>@ docker run --name joget --network=appnet --link mysql:jwdb -e MYSQL_HOST=jwdb -e MYSQL_DATABASE=jwdb -e MYSQL_PORT=3306 -e MYSQL_USER=joget -e MYSQL_PASSWORD=joget --mount source=jogetdata,target=/opt/joget/wflow -p 8080:8080 -d jogetworkflow/joget-community
>> docker logs -f joget
>> docker exec -it joget bash
>> docker stop joget
>>
>> Joget Workflow instance UI to the host system on at port 8080, viewable at:
>> http://localhost:8080/jw/home/ --> (admin/admin)

Docker-Alfresco - https://github.com/Alfresco/acs-deployment/tree/master/docs/docker-compose
>> [https://hub.docker.com/u/alfresco]
>> Alfresco Content Repository - https://hub.docker.com/r/alfresco/alfresco-content-repository-community
>> Alfresco Share - https://hub.docker.com/r/alfresco/alfresco-share
>> Alfresco Solr6 - https://hub.docker.com/r/alfresco/alfresco-search-services
>> Alfresco ActiveMQ - https://hub.docker.com/r/alfresco/alfresco-activemq
>>
>> docker-compose -f alfresco/docker-compose.yml up -d <alfresco/share/solr6/activemq>
>> docker-compose -f alfresco/docker-compose.yml logs -f <alfresco/share/solr6/activemq>
>> docker-compose -f alfresco/docker-compose.yml exec <alfresco/share/solr6/activemq> bash
>> docker-compose -f alfresco/docker-compose.yml stop <alfresco/share/solr6/activemq>
>> docker-compose -f alfresco/docker-compose.yml down --rmi local
>>
>> Open the following URLs in your browser to check that everything starts up:
>> Administration and REST APIs: http://<machine_ip>:8080/alfresco
>> Alfresco Digital Workspace: http://<machine_ip>:8080/workspace
>> Share: http://<machine_ip>:8080/share
>> Search administration: http://<machine_ip>:8083/solr
>>
>> If you requested an extended trial license navigate to the Admin Console and apply your license:
>> http://<machine_ip>:8080/alfresco/service/enterprise/admin/admin-license
>> Default username and password is admin
