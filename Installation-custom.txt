Docker-shellrunservers
>> docker network create appnet

Docker-ElasticSearch
>> docker pull docker.elastic.co/elasticsearch/elasticsearch:7.2.0
>> docker run --rm --name=elastic1 --network=appnet --env "discovery.type=single-node" -p 9200:9200 -p 9300:9300 -d docker.elastic.co/elasticsearch/elasticsearch:7.2.0
>> docker run --rm --name=elastic1 --network=appnet --env "discovery.type=single-node" --env "cluster.name=elastic-cluster" --mount type=bind,src=/opt/docker/elasticsearch/conf,dst=/usr/share/elasticsearch/config --mount type=bind,src=/opt/docker/elasticsearch/data,dst=/usr/share/elasticsearch/data -p 9200:9200 -p 9300:9300 -d docker.elastic.co/elasticsearch/elasticsearch:7.2.0
>> docker logs elastic1
>> docker exec -it elastic1 bash
>> docker stop elastic1

Docker-Kibana
>> docker pull docker.elastic.co/kibana/kibana:7.2.0
>> docker run --rm --name=kibana1 --network=appnet --link elastic1:elasticsearch --mount type=bind,src=/opt/docker/kibana/conf,dst=/usr/share/kibana/config -p 5601:5601 -d docker.elastic.co/kibana/kibana:7.2.0
>> docker logs kibana1
>> docker exec -it kibana1 bash
>> docker stop kibana1

Docker-Logstash
>> docker pull docker.elastic.co/logstash/logstash:7.2.0
>> docker run --rm --name=logstash1 --network=appnet --link elastic1:elasticsearch --mount type=bind,src=/opt/docker/logstash/conf,dst=/usr/share/logstash/config --mount type=bind,src=/opt/docker/logstash/pipeline,dst=/usr/share/logstash/pipeline -p 5044:5044 -d docker.elastic.co/logstash/logstash:7.2.0
>> docker logs logstash1
>> docker exec -it logstash1 bash
>> docker stop logstash1

Docker-Beats
>> [Auditbeat]   docker pull docker.elastic.co/beats/auditbeat:7.2.0
>> [Filebeat]    docker pull docker.elastic.co/beats/filebeat:7.2.0
>> [Heartbeat]   docker pull docker.elastic.co/beats/heartbeat:7.2.0
>> [Journalbeat] docker pull docker.elastic.co/beats/journalbeat:7.2.0 
>> [Metricbeat]  docker pull docker.elastic.co/beats/metricbeat:7.2.0
>> [Packetbeat]  docker pull docker.elastic.co/beats/packetbeat:7.2.0
>>
>> [Filebeat and index pattern setup]
>> docker run -it --rm --name=filebeat1 --network=appnet --link elastic1:elasticsearch --link kibana1:kibana --link logstash1:logstash docker.elastic.co/beats/filebeat:7.2.0 setup --dashboards --machine-learning -E setup.kibana.host=kibana1:5601
>> docker run -it --rm --name=filebeat1 --network=appnet --link elastic1:elasticsearch --link kibana1:kibana --link logstash1:logstash docker.elastic.co/beats/filebeat:7.2.0 setup -E setup.kibana.host=kibana:5601 -E output.elasticsearch.hosts=["elasticsearch:9200"]
>> docker run --rm --name=filebeat1 --network=appnet --link elastic1:elasticsearch --link kibana1:kibana --link logstash1:logstash --mount type=bind,src=/opt/docker/filebeat/conf/filebeat.yml,dst=/usr/share/filebeat/filebeat.yml -d docker.elastic.co/beats/filebeat:7.2.0
>> docker run --rm --name=filebeat1 --network=appnet --link elastic1:elasticsearch --link kibana1:kibana --link logstash1:logstash --mount type=bind,src=/opt/docker/filebeat/conf/filebeat.yml,dst=/usr/share/filebeat/filebeat.yml --mount type=bind,src=/opt/docker/filebeat/vmlog,dst=/usr/share/filebeat/logs -d docker.elastic.co/beats/filebeat:7.2.0
>> docker logs filebeat1
>> docker exec -it filebeat1 bash
>> docker stop filebeat1

Docker-Drools KIE Execution Server
>> docker pull jboss/kie-server:latest
>> docker run -it --rm --name=kie-server1 --network=appnet --link kie-workbench1:business-central-workbench -p 8080:8080 -d jboss/kie-server:latest
>> docker run --rm --name=kie-server1 --network=appnet --link kie-workbench1:business-central-workbench --mount type=bind,src=/opt/docker/kie-server/conf,dst=/opt/jboss/wildfly/standalone/configuration -p 8080:8080 -d jboss/kie-server:latest
>> docker logs kie-server1
>> docker exec -it kie-server1 bash
>> docker stop kie-server1
>>
>> [Once container and web applications started, the application is available at:]
>> http://localhost:8080/kie-server
>> [The REST API service is located at:]
>> http://localhost:8080/kie-server/services/rest/server/
>> [To add Management Users to the container]
>> ./add-user -u admin -p mimosbhd -ro admin,analyst,developer,manager,user,kiemgmt,kie-server,rest-all
>> [To add Application Users to the container]
>> ./add-user -a -u kieserver -p kieserver -ro admin,analyst,developer,manager,user,kiemgmt,kie-server,rest-all

Docker-Drools Business-Central Workbench
>> docker pull jboss/business-central-workbench:latest
>> docker run -it --rm --name=kie-workbench1 --network=appnet --link kie-server1:kie-server -p 8080:8080 -p 8001:8001 -d jboss/business-central-workbench:latest
>> docker run --rm --name=kie-workbench1 --network=appnet --link kie-server1:kie-server --mount type=bind,src=/opt/docker/kie-workbench/conf,dst=/opt/jboss/wildfly/standalone/configuration -p 8080:8080 -p 8001:8001 -d jboss/business-central-workbench:latest
>> docker logs kie-workbench1
>> docker exec -it kie-workbench1 bash
>> docker stop kie-workbench1
>>
>> [Once container and web applications started, you can navigate into the business-central Workbench at:]
>> http://localhost:8080/business-central
>> [To add Management Users to the container]
>> ./add-user -u admin -p mimosbhd -ro admin,analyst,developer,manager,user,kiemgmt,kie-server,rest-all
>> [To add Application Users to the container]
>> ./add-user -a -u kieserver -p kieserver -ro admin,analyst,developer,manager,user,kiemgmt,kie-server,rest-all

Docker-Hadoop
>> docker pull sequenceiq/hadoop-docker
>> docker run -it sequenceiq/hadoop-docker:latest /etc/bootstrap.sh -bash
>> docker run --rm --name=hadoop1 -p 9000:9000 -p 8088:8088 -p 50070:50070 -it sequenceiq/hadoop-docker:latest /etc/bootstrap.sh -bash
>> docker logs hadoop1
>> docker exec -it hadoop1 bash
>> docker stop hadoop1
