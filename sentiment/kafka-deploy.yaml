# [[[Deploying Kafka on Kubernetes]]]
# Kafka node discovery through Headless Service & Kafka cluster using StatefulSet
# https://kubernetes.io/docs/tutorials/stateful-application/zookeeper/
# https://medium.com/kafka-in-kubernetes/deploying-zookeeper-cluster-3acdcc7ed340
# https://portworx.com/blog/run-ha-kafka-rancher-kubernetes-engine/
#
# <cmd> kubectl apply -f Kafka-deploy.yaml
# <cmd> kubectl port-forward -n myspace statefulset/Kafka 9092:9092
# <cmd> kubectl exec -i -t deploy/busybox -- nslookup ka-headless
#       Server:    10.96.0.10
#       Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local
#       Name:      zk-headless
#       Address 1: 10.244.1.8 zookeeper-0.zk-headless.myspace.svc.cluster.local
#       Address 2: 10.244.3.9 zookeeper-1.zk-headless.myspace.svc.cluster.local
#
# <cmd> for i in 0 1 2; do echo "myid kafka-$i";kubectl exec kafka-$i -- cat /bitnami/kafka/data/myid; done
# <cmd> for i in 0 1 2; do kubectl exec kafka-$i -- hostname -f; done
# <cmd> kubectl exec kafka-0 -- cat /opt/bitnami/kafka/conf/zoo.cfg
# <cmd> for i in 0 1 2; do kubectl get pod kafka-$i --template {{.spec.nodeName}}; echo ""; done
# <cmd> kubectl exec zookeeper-0 -- /opt/bitnami/zookeeper/bin/zkCli.sh create /hello world
# <cmd> kubectl exec zookeeper-1 -- /opt/bitnami/zookeeper/bin/zkCli.sh get /hello
#
# kafka-storage.yaml
# apiVersion: storage.k8s.io/v1
# kind: StorageClass
# metadata:
#   name: local-storage
# provisioner: rancher.io/local-path
# volumeBindingMode: WaitForFirstConsumer
# ---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: kafka-pv-volume
  labels:
    type: local
spec:
  storageClassName: local-storage
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: '/mnt/data'
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: kafka-pv-claim
  namespace: myspace
spec:
  storageClassName: local-storage
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi
---
# kafka-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ka-headless
  namespace: myspace
  labels:
    app: ka-headless
spec:
  clusterIP: None
  ports:
    - name: '9092'
      port: 9092
      targetPort: 9092
      protocol: TCP
    - name: '9093'
      port: 9093
      targetPort: 9093
      protocol: TCP
  selector:
    app: kafka
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: myspace
  labels:
    app: kafka
spec:
  replicas: 3
  serviceName: ka-headless
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      volumes:
      - name: kafka-storage
        persistentVolumeClaim:
          claimName: kafka-pv-claim
      containers:
      - name: kafka-container
        image: bitnami/kafka:latest
        ports:
        - containerPort: 9092
        - containerPort: 9093
        resources:
          requests:
            memory: 1Gi
          limits:
            memory: 2Gi
        env:
        - name: ALLOW_PLAINTEXT_LISTENER
          value: "yes"
#       - name: KAFKA_BROKER_ID
#         value: "1"
        - name: KAFKA_CFG_ZOOKEEPER_CONNECT
          value: zookeeper-0.zk-headless.myspace.svc.cluster.local:2181,zookeeper-1.zk-headless.myspace.svc.cluster.local:2181
        - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
          value: CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
        - name: KAFKA_CFG_LISTENERS
          value: CLIENT://:9092,EXTERNAL://:19092
        - name: KAFKA_CFG_ADVERTISED_LISTENERS
          value: CLIENT://kafka01:9092,EXTERNAL://localhost:19092
        - name: KAFKA_INTER_BROKER_LISTENER_NAME
          value: CLIENT
        - name: KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE
          value: "true"
        volumeMounts:
        - name: kafka-storage
          mountPath: /mnt/kafka
